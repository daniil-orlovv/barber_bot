import time

from aiogram import Bot, F, Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from sqlalchemy.orm import Session

from api.get_feedback import get_feedback_master
from filters.filters import CheckCallbackFeedback
from keyboards.keyboards_utils import create_inline_kb
from lexicon.buttons import accept_cancel, button_auth
from states.states import FeedbackMaster
from utils.utils_db import check_exist_client_in_db, get_user_token_of_client

router = Router()


async def get_feedback(bot: Bot, user_id: int) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏
    –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤."""

    button = InlineKeyboardButton(
        text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
        callback_data='feedback'
    )
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[[button]]
    )
    await bot.send_message(user_id,
                           text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –º–∞—Å—Ç–µ—Ä–µ.",
                           reply_markup=reply_markup)


@router.callback_query(CheckCallbackFeedback())
async def start_feedback(callback: types.CallbackQuery,
                         state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ callback='feedback' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—å–±—É –Ω–∞–ø–∏—Å–∞—Ç—å
    —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ."""
    await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞... ‚è≥')
    sent_message = await callback.message.edit_text(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ:'
    )
    sent_message_id = sent_message.message_id
    await state.update_data(id_message=sent_message_id)
    await state.set_state(FeedbackMaster.waiting_text)


@router.message(F.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–∞—Å—Ç–µ—Ä—É üíá')
async def start_feedback_message(message: Message, state: FSMContext,
                                 session: Session) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–¥–ø–∏—Å—å—é '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–∞—Å—Ç–µ—Ä—É üíá'
    , –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—å–±—É –Ω–∞–ø–∏—Å–∞—Ç—å
    —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ."""

    telegram_id = message.from_user.id

    user_auth = check_exist_client_in_db(session, telegram_id)
    if user_auth:
        sent_message = await message.answer(
            text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ:'
        )
        sent_message_id = sent_message.message_id
        await state.update_data(id_message=sent_message_id)
        await state.set_state(FeedbackMaster.waiting_text)
    else:
        adjust = (1,)
        inline_keyboard = create_inline_kb(adjust, **button_auth)
        await message.answer(
                text=('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                      '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:'),
                reply_markup=inline_keyboard
            )


@router.message(StateFilter(FeedbackMaster.waiting_text))
async def get_text_feedback(message: Message, state: FSMContext,
                            bot: Bot) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FeedbackMaster.waiting_text,
    –ø–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å–∏—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Å –ø–æ–º–æ—â—å—é
    –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    await state.update_data(text=message.text)

    state_data = await state.get_data()
    message_id = state_data['id_message']
    await bot.delete_message(chat_id=message.chat.id, message_id=message_id)
    await message.delete()

    marks = (1, 2, 3, 4, 5)
    adjust = (5,)
    inline_keyboard = create_inline_kb(adjust, *marks)
    await message.answer(
        text='–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:',
        reply_markup=inline_keyboard
    )
    await state.set_state(FeedbackMaster.waiting_mark)


@router.callback_query(StateFilter(FeedbackMaster.waiting_mark))
async def get_mark_feedback(callback: types.CallbackQuery,
                            state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FeedbackMaster.waiting_mark,
    –ø–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É, –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –∏–º—è –¥–ª—è –æ—Ç–∑—ã–≤–∞."""
    await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞... ‚è≥')
    mark = callback.data
    await state.update_data(mark=mark)

    await callback.message.edit_text(
        text='–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –¥–ª—è –æ—Ç–∑—ã–≤–∞:'
    )
    await state.set_state(FeedbackMaster.waiting_name)


@router.message(StateFilter(FeedbackMaster.waiting_name))
async def get_name_feedback(message: Message, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FeedbackMaster.waiting_name,
    –ø–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    await state.update_data(name=message.text)
    state_data = await state.get_data()
    text = state_data['text']
    mark = state_data['mark']
    name = state_data['name']

    adjust = (2, 2)
    keyboard = create_inline_kb(adjust, **accept_cancel)
    await message.answer(
        text=(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n'
              f'–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: {text}\n'
              f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {mark}\n'
              f'–í–∞—à–µ –∏–º—è: {name}'),
        reply_markup=keyboard
    )

    await state.set_state(FeedbackMaster.waiting_accepting)


@router.callback_query(StateFilter(FeedbackMaster.waiting_accepting))
async def acceptng_feedback(callback: types.CallbackQuery, session: Session,
                            state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FeedbackMaster.waiting_accepting –∏
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç, –ª–∏–±–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback."""

    if callback.data == 'accept':
        await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–∑—ã–≤... ‚è≥')

        state_data = await state.get_data()
        text = state_data['text']
        mark = state_data['mark']
        name = state_data['name']
        telegram_id = callback.from_user.id
        user_token = get_user_token_of_client(session, telegram_id)
        get_feedback_master(mark, text, name, user_token)

        time.sleep(0.5)
        await callback.message.edit_text(
            text='–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚úÖ'
        )
        await state.clear()

    elif callback.data == 'cancel':
        await callback.message.edit_text('–ó–∞–≥—Ä—É–∑–∫–∞... ‚è≥')
        time.sleep(0.5)
        await callback.message.edit_text(
            text=('–û—Ç–∑—ã–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'))
        await state.clear()
